import streamlit as st
import openai
import os
from PIL import Image
from justother import final_model_response
from justother import heading_from_pdf
from justother import text_from_pdf
from justother import heading_from_docx
from justother import text_from_docx
from justone import response_file_pdf

image1 = Image.open('symbo.png')
image2 = Image.open("new_symbo.png")

#initializing variables
heading = "-1"
text = "-1"
response = "-1"
DALLE_image_title="-1"
DALLE_image = Image.open('symbo.png')
lst_sources = ["0","0"]

if "preview" not in st.session_state:
    st.session_state["preview"]=True
if "pdf" not in st.session_state:
    st.session_state["pdf"]=True
if "docx" not in st.session_state:
    st.session_state["docx"]=True

col1, col2 = st.columns(2)

with col1:
   st.image(image1)

with col2:
   st.image(image2)

st.session_state["preview"]=True
st.session_state["pdf"]=True
st.session_state["docx"]=True
st.session_state["model"]="gpt-3.5-turbo"


st.title('**:red[NextGenAI]** Content Generator')

with st.sidebar:
    st.markdown('# **NextGenAI Content Generator**')
    st.markdown("Submission for the Prototype round of **:violet[<TechSurf/> 2023]** by **ContentStack**.")
    st.markdown("Submission by [Ankur Kumar Raj](www.github.com/ankurkraj)")
    st.markdown("---")

with st.sidebar.expander(" üõ†Ô∏è Additional Low Level Customizations üõ†Ô∏è", expanded=False):
    # Option to preview memory store
    st.markdown('If you wish to provide your own API key, you can get one at [OpenAI](https://platform.openai.com/account/api-keys)')
    openai_api_key = st.text_input("„äôÔ∏è OpenAI API Secret Key", type="password")
    st.markdown("---")
    st.markdown('By default All the output formats will be displayed. You can check any of the boxes to not display a particular output format.')

    if st.checkbox("Do not preview the model OutPut"):
        st.session_state["preview"]=False
    if st.checkbox("Do not output PDF form of the OutPut"):
        st.session_state["pdf"]=False
    if st.checkbox("Do not preview DOCX(Microsoft Word) form of the OutPut"):
        st.session_state["docx"]=False

    st.markdown("---")
    # Option to preview memory buffer
    st.session_state['model'] = st.selectbox(
        label="Model",
        options=[
            "gpt-3.5-turbo",
            "text-davinci-003",
            "gpt-4",
        ],
    )

st.markdown("---")

st.markdown(':writing_hand What kind of input will you be providing ?')
input_type = st.selectbox(
        "‚úçÔ∏è What kind of input will you be providing ?",
        ('Input in the Box', 'Upload a File'))
if input_type == "Input in the Box":
    text = st.text_input("Input Content", type="default",
                              placeholder="Input the Type of content that you want the model to generate the content based on.",
                              help="You can choose this option if you want to directly input the content.")
    if text:
        st.success('Input Received ', icon="‚úÖ")
else:
    uploaded_file = st.file_uploader(
        "üìÅ Upload a pdf, docx, or txt file",
        type=["pdf", "docx", "txt"],
        help="Scanned documents are not supported yet!",
    )
    if uploaded_file:
        st.success('File Uploaded ', icon="‚úÖ")
        if str(uploaded_file)[:len(uploaded_file)-4]==".pdf":
            heading = heading_from_pdf(uploaded_file)
            text = text_from_pdf(uploaded_file)
        if str(uploaded_file)[:len(uploaded_file)-5]==".docx":
            heading = heading_from_docx(uploaded_file)
            text = text_from_docx(uploaded_file)

bool_head = st.radio(
    "Do you want to provide a heading ?",
    ('Yes', 'No'), help="Click here if you want to provide a heading, leave it black if you want the model to generate a heading on its own or recognize the heading itself from the given input")

if bool_head == "Yes":
    heading = st.text_input("Heading", type="default", placeholder="Input the Heading")
    if heading:
        st.success('Heading Received ', icon="‚úÖ")
Creativity = st.slider(
    "Creativity Bar",0.0, 1.0, 0.01, help="Determines the creativity level of the content generated, by default it is set to 0. The most technically accurate results are produced by the model at Value = 0. While out of the box outputs are generated by greater values. 1 being at the max.")

submit = st.button("Submit the inputs and Generate additional Content ")

if submit==True:
    with st.spinner('Wait for it...'):
        response = "-1"
        print(heading)
        print(text)
        print(Creativity)
        response = final_model_response(text, heading, Creativity)
    st.balloons()
    st.snow()
    st.download_button(
        label="Download data as PDF",
        data=response_file_pdf(),
        file_name='large_df.pdf',
        mime='text/csv',
    )
